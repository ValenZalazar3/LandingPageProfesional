---
import ThemeToggle from './ThemeToggle.astro'

const navItems = [
    {
        title: 'Inicio',
        label: 'inicio',
        url: '/#hero'
    },
    {
        title: 'Servicios',
        label: 'servicios',
        url: '/#services'
    },

    {
        title: 'Proyectos',
        label: 'proyectos',
        url: '/#projects'
    },

    {
        title: 'Contacto',
        label: 'contacto',
        url: '/#calendly'
    }
]
---

<header
    class='fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2'
>
    <nav
        class='flex px-3 text-sm font-medium rounded-full bg-gray-300 text-gray-800 dark:text-white dark:bg-gray-900/90 justify-center items-center'
    >
        {
            navItems.map((link) => (
                <a
                    class='relative block px-2 py-2 transition hover:text-green-400 dark:hover:text-green-400'
                    aria-label={link.label}
                    href={link.url}
                >
                    {link.title}
                </a>
            ))
        }
        <ThemeToggle />
    </nav>
</header>

<script>
    document.addEventListener('astro:page-load', () => {
        const sections = document.querySelectorAll('section')
        const navItems = document.querySelectorAll('header nav a')

        const callback = (entries: any[]) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    navItems.forEach((item) => {
                        if (
                            item.getAttribute('aria-label') == entry.target.id
                        ) {
                            item.classList.add('text-green-500')
                        } else {
                            item.classList.remove('text-green-500')
                        }
                    })
                }
            })
        }

        const observer = new IntersectionObserver(callback, {
            root: null,
            rootMargin: '0px',
            threshold: 0.3
        })

        sections.forEach((section) => {
            observer.observe(section)
        })

        // Cleanup function
        document.onvisibilitychange = () => {
            if (document.visibilityState === 'hidden') {
                observer.disconnect()
            } else {
                sections.forEach((section) => {
                    observer.observe(section)
                })
            }
        }
    })
</script>

<style>
    nav {
        animation: nav-shadown 1s linear both;
        animation-timeline: scroll();
        animation-range: 0 100px;
    }

    @keyframes nav-shadown {
        to {
            @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/50 ring-white/10;
        }
    }
</style>
